pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'alexandracoder/apache-php-docker'
        TAG = "${BUILD_NUMBER}"
        CONTAINER_NAME = "test_apache_container"
    }

    stages {
        stage('Checkout') {
            steps {
                git credentialsId: 'github-token', url: 'https://github.com/Alexandracoder/apache.git', branch: 'main'
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Ensure the Dockerfile path is correct
                    sh "docker build -t ${DOCKER_IMAGE}:${TAG} -f apache-php-docker/Dockerfile ."
                }
            }
        }

       stage('Test Docker Image') {
    steps {
        script {
            // Run the Docker container on a dynamic port or chosen port
            sh "docker run -d --rm --name ${CONTAINER_NAME} -p ${HOST_PORT}:80 ${DOCKER_IMAGE}:${TAG}"
            sh "sleep 5"  // Wait for the container to start
            // Use the dynamic port in the curl command
            sh "curl -f http://localhost:${HOST_PORT}"
            sh "docker stop ${CONTAINER_NAME}"
        }
    }
}

                }
            }
        }

        stage('Tag Docker Image') {
            steps {
                script {
                    sh "docker tag ${DOCKER_IMAGE}:${TAG} ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Push to DockerHub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'dockerhub-creds-id') {
                        sh "docker push ${DOCKER_IMAGE}:${TAG}"
                        sh "docker push ${DOCKER_IMAGE}:latest"
                    }
                }
            }
        }

        stage('Notify Success') {
            steps {
                echo "‚úÖ Build and push completed successfully!"
            }
        }

        stage('Cleanup') {
            steps {
                script {
                    echo "üßπ Cleaning up old Docker images..."
                    // Optional cleanup, comment out if not desired
                    sh "docker image prune -f"
                }
            }
        }

        stage('Find Free Port') {
            steps {
                script {
                    // Try finding a free port using Python (more portable than netcat/lsof)
                    def port = sh(
                        script: "python3 -c \"import socket; s=socket.socket(); s.bind(('', 0)); print(s.getsockname()[1]); s.close()\"",
                        returnStdout: true
                    ).trim()

                    env.HOST_PORT = port
                    echo "Using dynamic port: ${env.HOST_PORT}"
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                sh "docker run -d --rm --name ${CONTAINER_NAME} -p ${HOST_PORT}:80 ${DOCKER_IMAGE}:${TAG}"
            }
        }
    }

    post {
        failure {
            echo "‚ùå The pipeline failed. Please check the logs."
        }
    }
}
